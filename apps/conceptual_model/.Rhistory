GradP = Basin_Info$k_value)
inputsPert <- CreateInputsPert(FUN_MOD = FUN_MOD,
DatesR = basinObsTS_long$date,
Precip = basinObsTS_long$Ptot,
PotEvap = basinObsTS_long$PET,
TempMean  = basinObsTS_long$Temp,
HypsoData = Basin_Info$HypsoData,
ZInputs   = median(Basin_Info$HypsoData),
NbMbr = NbMbr,
GradT = Basin_Info$GradT,
GradP = Basin_Info$k_value,
Eps_Ptot = eps,
Eps_PET = eps)
Code <- 15194
FUN_MOD <- get(config$fun_mod_mapping[[as.character(Code)]])
# # basin specific path
dir_basin <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_BASININFO"), Code)
dir_Output <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_INITCOND"), Code)
dir_Results <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_RESULT"), Code)
## 1.1 Initial ####
load(file.path(dir_basin,"param.RData"))
load(file.path(dir_basin,"Basin_Info.RData"))
load(file.path(dir_Output, "runResults_op.RData"))
Enddate_operational <- as.Date(max(runResults_op$DatesR))
# pf: one file per basin
pfP_forecast_filename <- paste0(Code,Sys.getenv("ieasyhydroforecast_FILE_PF_P"))
pfT_forecast_filename <- paste0(Code,Sys.getenv("ieasyhydroforecast_FILE_PF_T"))
## 1.2 Discharge observations ####
Q_obs <- process_discharge_data(file.path(dir_Q, Sys.getenv("ieasyhydroforecast_FILE_Q")), Basin_Info$BasinCode, Basin_Info$BasinArea_m2)
## 1.3 Operational forcing data  ####
basinObs_cf <- process_forecast_forcing(member_id = "cf",
Basin_code = Basin_Info$BasinCode,
file_path_Ptot = file.path(dir_Control, cfP_forecast_filename),
file_path_Temp = file.path(dir_Control, cfT_forecast_filename),
Lat = Basin_Info$BasinLat_rad,
Q_obs = Q_obs)
print(paste("Hindcast from", start_date_hindcast, "to", end_date_hindcast, "-> hindcasting"))
# get all the hindcasting data as well
basinObs_hind <- process_forecast_forcing(member_id = "cf",
Basin_code = Basin_Info$BasinCode,
file_path_Ptot = file.path(dir_hindcast, P_hindcast_filename),
file_path_Temp = file.path(dir_hindcast, T_hindcast_filename),
Lat = Basin_Info$BasinLat_rad,
Q_obs = Q_obs)
# combine
basinObsTS_long <- rbind(basinObs_hind, basinObs_cf)
basinObsTS_long <- basinObsTS_long %>% distinct(date, .keep_all = TRUE)
inputsModel <- CreateInputsModel(FUN_MOD   = FUN_MOD,
DatesR    = basinObsTS_long$date,
Precip    = basinObsTS_long$Ptot,
PotEvap   = basinObsTS_long$PET,
TempMean  = basinObsTS_long$Temp,
HypsoData = Basin_Info$HypsoData,
ZInputs   = median(Basin_Info$HypsoData),
verbose = FALSE,
GradT = Basin_Info$GradT,
GradP = Basin_Info$k_value)
inputsPert <- CreateInputsPert(FUN_MOD = FUN_MOD,
DatesR = basinObsTS_long$date,
Precip = basinObsTS_long$Ptot,
PotEvap = basinObsTS_long$PET,
TempMean  = basinObsTS_long$Temp,
HypsoData = Basin_Info$HypsoData,
ZInputs   = median(Basin_Info$HypsoData),
NbMbr = NbMbr,
GradT = Basin_Info$GradT,
GradP = Basin_Info$k_value,
Eps_Ptot = eps,
Eps_PET = eps)
hind <- get_hindcast(forecast_date = as.Date("2018-31-12")
forecast_mode= "daily",
hind <- get_hindcast(forecast_date = as.Date("2018-31-12")
forecast_mode = "daily",
hind <- get_hindcast(forecast_date = as.Date("2018-31-12"),
forecast_mode = "daily",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert) {
hind <- get_hindcast(forecast_date = as.Date("2018-31-12"),
forecast_mode = "daily",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert)
date <- as.Date("2018-31-12")
date <- as.Date("2018-12-31")
hind <- get_hindcast(forecast_date = date,
forecast_mode = "daily",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert)
hind
hind_pen <- get_hindcast(forecast_date = date,
forecast_mode = "pentad",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert)
hind_dec <- get_hindcast(forecast_date = date,
forecast_mode = "decad",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert)
hind_pen
hind_dec
##################################################################
# 0 Function ####
source("functions/functions_operational.R")
source("functions/functions_hindcast.R")
################### INITIALIZE ###################
# JSON file
if (!dir.exists(Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"))) {
stop("Directory ", Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"), " not found. ")
}
config_dir = Sys.getenv("ieasyhydroforecast_PATH_TO_JSON")
config_setup = Sys.getenv("ieasyhydroforecast_FILE_SETUP_HINDCAST")
config <- fromJSON(paste0(config_dir,"/",config_setup))
# general path
dir_Q <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_Q"))
dir_Control <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_CF"))
dir_Ensemble <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_PF"))
dir_hindcast <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_HIND"))
# file names for control memnber (cf) and ensemble member (pf) forecast and for the hindcasting forcing data (starts from 2009-01-01)
# cf: all basins in one file
cfP_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_P")
cfT_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_T")
# hindcast filename
P_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_P")
T_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_T")
# Extract parameters from config
NbMbr <- config$NbMbr
DaMethod <- config$DaMethod
StatePert <- config$StatePert
eps <- config$eps
lag_days <- config$lag_days
hindcast_mode <- config$hindcast_mode
start_date_hindcast <- config$start_hindcast %>% as.Date()
end_date_hindcast <- config$end_hindcast %>% as.Date()
print(paste0("Hincasting: ", hindcast_mode, " from ",start_date_hindcast," to ", end_date_hindcast))
date <- as.Date("2010-12-31")
hind <- get_hindcast(forecast_date = date,
forecast_mode = "daily",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert)
inputsModel
date
test <- date - 2*365 - 180
test
##################################################################
# 0 Function ####
source("functions/functions_operational.R")
source("functions/functions_hindcast.R")
################### INITIALIZE ###################
# JSON file
if (!dir.exists(Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"))) {
stop("Directory ", Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"), " not found. ")
}
config_dir = Sys.getenv("ieasyhydroforecast_PATH_TO_JSON")
config_setup = Sys.getenv("ieasyhydroforecast_FILE_SETUP_HINDCAST")
config <- fromJSON(paste0(config_dir,"/",config_setup))
# general path
dir_Q <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_Q"))
dir_Control <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_CF"))
dir_Ensemble <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_PF"))
dir_hindcast <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_HIND"))
# file names for control memnber (cf) and ensemble member (pf) forecast and for the hindcasting forcing data (starts from 2009-01-01)
# cf: all basins in one file
cfP_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_P")
cfT_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_T")
# hindcast filename
P_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_P")
T_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_T")
# Extract parameters from config
NbMbr <- config$NbMbr
DaMethod <- config$DaMethod
StatePert <- config$StatePert
eps <- config$eps
lag_days <- config$lag_days
hindcast_mode <- config$hindcast_mode
start_date_hindcast <- config$start_hindcast %>% as.Date()
end_date_hindcast <- config$end_hindcast %>% as.Date()
print(paste0("Hincasting: ", hindcast_mode, " from ",start_date_hindcast," to ", end_date_hindcast))
date <- as.Date("2010-12-31")
hind <- get_hindcast(forecast_date = date,
forecast_mode = "daily",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert)
##################################################################
# 0 Function ####
source("functions/functions_operational.R")
source("functions/functions_hindcast.R")
################### INITIALIZE ###################
# JSON file
if (!dir.exists(Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"))) {
stop("Directory ", Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"), " not found. ")
}
config_dir = Sys.getenv("ieasyhydroforecast_PATH_TO_JSON")
config_setup = Sys.getenv("ieasyhydroforecast_FILE_SETUP_HINDCAST")
config <- fromJSON(paste0(config_dir,"/",config_setup))
# general path
dir_Q <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_Q"))
dir_Control <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_CF"))
dir_Ensemble <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_PF"))
dir_hindcast <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_HIND"))
# file names for control memnber (cf) and ensemble member (pf) forecast and for the hindcasting forcing data (starts from 2009-01-01)
# cf: all basins in one file
cfP_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_P")
cfT_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_T")
# hindcast filename
P_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_P")
T_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_T")
# Extract parameters from config
NbMbr <- config$NbMbr
DaMethod <- config$DaMethod
StatePert <- config$StatePert
eps <- config$eps
lag_days <- config$lag_days
hindcast_mode <- config$hindcast_mode
start_date_hindcast <- config$start_hindcast %>% as.Date()
end_date_hindcast <- config$end_hindcast %>% as.Date()
print(paste0("Hincasting: ", hindcast_mode, " from ",start_date_hindcast," to ", end_date_hindcast))
date <- as.Date("2010-12-31")
hind <- get_hindcast(forecast_date = date,
forecast_mode = "daily",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert)
##################################################################
# 0 Function ####
source("functions/functions_operational.R")
source("functions/functions_hindcast.R")
################### INITIALIZE ###################
# JSON file
if (!dir.exists(Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"))) {
stop("Directory ", Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"), " not found. ")
}
config_dir = Sys.getenv("ieasyhydroforecast_PATH_TO_JSON")
config_setup = Sys.getenv("ieasyhydroforecast_FILE_SETUP_HINDCAST")
config <- fromJSON(paste0(config_dir,"/",config_setup))
# general path
dir_Q <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_Q"))
dir_Control <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_CF"))
dir_Ensemble <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_PF"))
dir_hindcast <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_HIND"))
# file names for control memnber (cf) and ensemble member (pf) forecast and for the hindcasting forcing data (starts from 2009-01-01)
# cf: all basins in one file
cfP_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_P")
cfT_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_T")
# hindcast filename
P_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_P")
T_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_T")
# Extract parameters from config
NbMbr <- config$NbMbr
DaMethod <- config$DaMethod
StatePert <- config$StatePert
eps <- config$eps
lag_days <- config$lag_days
hindcast_mode <- config$hindcast_mode
start_date_hindcast <- config$start_hindcast %>% as.Date()
end_date_hindcast <- config$end_hindcast %>% as.Date()
print(paste0("Hincasting: ", hindcast_mode, " from ",start_date_hindcast," to ", end_date_hindcast))
date <- as.Date("2010-12-31")
hind <- get_hindcast(forecast_date = date,
forecast_mode = "daily",
lag_days = 180,
Basin_Info = Basin_Info,
FUN_MOD = FUN_MOD,
parameter = param,
inputsModel = inputsModel,
inputsPert = inputsPert,
basinObsTS = basinObsTS_long,
DaMethod = DaMethod,
NbMbr = NbMbr,
StatePert = StatePert)
##################################################################
# 0 Function ####
source("functions/functions_operational.R")
source("functions/functions_hindcast.R")
################### INITIALIZE ###################
# JSON file
if (!dir.exists(Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"))) {
stop("Directory ", Sys.getenv("ieasyhydroforecast_PATH_TO_JSON"), " not found. ")
}
config_dir = Sys.getenv("ieasyhydroforecast_PATH_TO_JSON")
config_setup = Sys.getenv("ieasyhydroforecast_FILE_SETUP_HINDCAST")
config <- fromJSON(paste0(config_dir,"/",config_setup))
# general path
dir_Q <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_Q"))
dir_Control <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_CF"))
dir_Ensemble <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_PF"))
dir_hindcast <- file.path(Sys.getenv("ieasyhydroforecast_PATH_TO_HIND"))
# file names for control memnber (cf) and ensemble member (pf) forecast and for the hindcasting forcing data (starts from 2009-01-01)
# cf: all basins in one file
cfP_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_P")
cfT_forecast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_T")
# hindcast filename
P_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_P")
T_hindcast_filename <- Sys.getenv("ieasyhydroforecast_FILE_CF_HIND_T")
# Extract parameters from config
NbMbr <- config$NbMbr
DaMethod <- config$DaMethod
StatePert <- config$StatePert
eps <- config$eps
lag_days <- config$lag_days
hindcast_mode <- config$hindcast_mode
start_date_hindcast <- config$start_hindcast %>% as.Date()
end_date_hindcast <- config$end_hindcast %>% as.Date()
print(paste0("Hincasting: ", hindcast_mode, " from ",start_date_hindcast," to ", end_date_hindcast))
help(get_hindcast_period)
??get_hindcast_period
install.packages("roxygen2")
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
##################################################################
# 0 Function ####
source("functions/functions_operational.R")
source("functions/functions_hindcast.R")
help(get_hindcast_period)
??get_hindcast_period
start_date_hindcast <- as.Date("2016-12-31")
end_date_hindcast <- as.Date("2017-12-31")
hindcast <- get_hindcast_period(start_date =  start_date_hindcast,
end_date = end_date_hindcast,
forecast_mode = hindcast_mode,
lag_days = lag_days,
Basin_Info = Basin_Info,
basinObsTS = basinObsTS_long,
FUN_MOD = FUN_MOD,
param = param,
NbMbr = NbMbr,
DaMethod = DaMethod,
StatePert = StatePert,
eps = eps)
starthindcast
hindcast
hindcast
start_date_hindcast <- as.Date("2016-12-31")
end_date_hindcast <- as.Date("2016-01-31")
hindcast <- get_hindcast_period(start_date =  start_date_hindcast,
end_date = end_date_hindcast,
forecast_mode = hindcast_mode,
lag_days = lag_days,
Basin_Info = Basin_Info,
basinObsTS = basinObsTS_long,
FUN_MOD = FUN_MOD,
param = param,
NbMbr = NbMbr,
DaMethod = DaMethod,
StatePert = StatePert,
eps = eps)
start_date_hindcast <- as.Date("2016-12-31")
end_date_hindcast <- as.Date("2016-01-31")
hindcast <- get_hindcast_period(start_date =  start_date_hindcast,
end_date = end_date_hindcast,
forecast_mode = hindcast_mode,
lag_days = lag_days,
Basin_Info = Basin_Info,
basinObsTS = basinObsTS_long,
FUN_MOD = FUN_MOD,
param = param,
NbMbr = NbMbr,
DaMethod = DaMethod,
StatePert = StatePert,
eps = eps)
start_date_hindcast <- as.Date("2016-12-31")
end_date_hindcast <- as.Date("2017-01-31")
hindcast <- get_hindcast_period(start_date =  start_date_hindcast,
end_date = end_date_hindcast,
forecast_mode = hindcast_mode,
lag_days = lag_days,
Basin_Info = Basin_Info,
basinObsTS = basinObsTS_long,
FUN_MOD = FUN_MOD,
param = param,
NbMbr = NbMbr,
DaMethod = DaMethod,
StatePert = StatePert,
eps = eps)
dir <- "/Users/adrian/Documents/GitHub/SAPPHIRE_Forecast_Tools/apps/conceptual_model"
library(usethis)
library(devtools)
create_package(dir)
install.packages("roxygen2")
install.packages("devtools")
library(roxygen2)
library(devtools)
install.packages("devtools")
install.packages("roxygen2")
dir_package <- "/Users/adrian/Desktop/OF_CM"
# Set your working directory to the package directory
setwd/Users/adrian/Desktop/OF_CM)
# Set your working directory to the package directory
setwd("/Users/adrian/Desktop/OF_CM")
# Generate documentation and the NAMESPACE file
document()
# install.packages("roxygen2")
# install.packages("devtools")
library(roxygen2)
library(devtools)
dir_package <- "/Users/adrian/Desktop/OF_CM"
# Set your working directory to the package directory
setwd("/Users/adrian/Desktop/OF_CM")
# Generate documentation and the NAMESPACE file
document()
use_description()
# install.packages("roxygen2")
# install.packages("devtools")
library(roxygen2)
library(devtools)
dir_package <- "/Users/adrian/Desktop/OF_CM"
# Set your working directory to the package directory
setwd("/Users/adrian/Desktop/OF_CM")
# Generate documentation and the NAMESPACE file
document()
use_description()
# install.packages("roxygen2")
# install.packages("devtools")
library(roxygen2)
library(devtools)
dir_package <- "/Users/adrian/Desktop/OF_CM"
# Set your working directory to the package directory
setwd(dir_package)
# Generate documentation and the NAMESPACE file
document()
use_description()
# Generate documentation and the NAMESPACE file
document()
use_description()
# install.packages("roxygen2")
# install.packages("devtools")
library(roxygen2)
library(devtools)
dir_package <- "/Users/adrian/Desktop/OF_CM"
# Set your working directory to the package directory
setwd(dir_package)
# Generate documentation and the NAMESPACE file
document()
use_description()
setwd("/Users/adrian/Desktop/OF_CM")
document()
setwd("/Users/adrian/Desktop/OF_CM")
document()
document()
document()
document()
setwd("/Users/adrian/Desktop/OF_CM")
document()
setwd("/Users/adrian/Desktop/OF_CM")
document()
create_package("/Users/adrian/Desktop/OF_CM")
create_package("/Users/adrian/Desktop/OF_CM")
setwd("/Users/adrian/Desktop/OFCM")
create_package("/Users/adrian/Desktop/OFCM")
setwd("/Users/adrian/Desktop/OFCM")
create_package("/Users/adrian/Desktop/OFCM")
