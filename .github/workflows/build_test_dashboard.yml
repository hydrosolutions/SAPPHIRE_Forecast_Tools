name: Test Forecast App

env:
  # Use a test tag to avoid conflicts with production images
  IMAGE_TAG: build-test

  # Define image names (same as in deploy_main.yml)
  BASE_IMAGE_NAME: mabesa/sapphire-pythonbaseimage
  PIPELINE_IMAGE_NAME: mabesa/sapphire-pipeline
  DASHBOARD_IMAGE_NAME: mabesa/sapphire-dashboard
  PREPQ_IMAGE_NAME: mabesa/sapphire-preprunoff
  CONCMOD_IMAGE_NAME: mabesa/sapphire-conceptmod

on:
  # Run on all branch pushes except main (which uses deploy_main.yml)
#  push:
#    branches:
#      - maxat_integration_testing
  #  branches-ignore:
  #    - main
  # Also run on PRs targeting main
  pull_request:
    branches:
      - main

jobs:
  # Run the same tests as in deploy_main.yml
  test_ieasyhydroforecast:
    runs-on: ubuntu-latest
    name: Test iEasyHydroForecast
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout the commit that triggered the workflow
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set PYTHONPATH
      run: |
        echo "PYTHONPATH=${GITHUB_WORKSPACE}/apps/iEasyHydroForecast" >> $GITHUB_ENV
    - name: Install dependencies
      working-directory: .
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r ./apps/iEasyHydroForecast/requirements.txt
        python -m pip install git+https://github.com/hydrosolutions/ieasyhydro-python-sdk
        python -m pip install -e ./apps/iEasyHydroForecast
    - name: Test with unittest
      working-directory: ./apps
      run: |
        SAPPHIRE_TEST_ENV=True python -m unittest discover -s iEasyHydroForecast/tests -p 'test_*.py'

  # Build but don't push the base image
  build_python_311_base_image:
    needs: [test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Build Python 3.11 base image
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect Docker group ID
        run: |
          DOCKER_GID=$(getent group docker | cut -d: -f3 || stat -c "%g" /var/run/docker.sock)
          if [ -z "$DOCKER_GID" ]; then
            echo "WARNING: Docker group ID not found. Falling back to default GID 999."
            DOCKER_GID=999
          fi
          echo "Detected Docker group ID: $DOCKER_GID"
          echo "SAPPHIRE_DOCKER_GID=$DOCKER_GID" >> $GITHUB_ENV
      - name: Build Docker image
        run: |
          DOCKER_BUILDKIT=1 docker build \
          --build-arg USER_ID=1001 \
          --build-arg GROUP_ID=1001 \
          --build-arg SAPPHIRE_DOCKER_GID=${{ env.SAPPHIRE_DOCKER_GID }} \
          -t "${{ env.BASE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/docker_base_image/Dockerfile .
      - name: Test Base Image
        run: |
          docker run --rm "${{ env.BASE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" python -c "print('Base image build successful!')"

#  # Build but don't push the pipeline image
#  build_pipeline_image:
#    needs: [build_python_311_base_image]
#    runs-on: ubuntu-latest
#    name: Build pipeline/orchestrator image
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Build Docker image
#        run: |
#          docker build \
#          --build-arg USER_ID=1001 \
#          --build-arg GROUP_ID=1001 \
#          -t "${{ env.PIPELINE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
#          -f ./apps/pipeline/Dockerfile .

  # Set up the forecast dashboard environment
  test_dashboard:
    needs: [build_python_311_base_image]
    runs-on: ubuntu-latest
    name: Test forecast dashboard
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checks out current branch
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set PYTHONPATH
        run: |
          # Adding the iEasyHydroForecast folder to the PYTHONPATH
          echo "PYTHONPATH=${GITHUB_WORKSPACE}/apps/iEasyHydroForecast" >> $GITHUB_ENV
      - name: Get env var from GitHub secrets
        run: |
          echo "ieasyhydroforecast_url=${{ secrets.ieasyhydroforecast_url }}" >> $GITHUB_ENV
      - name: Install dependencies
        # Default working directory is the repository root folder
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r ./apps/forecast_dashboard/requirements.txt
          python -m pip install git+https://github.com/hydrosolutions/ieasyhydro-python-sdk
          python -m pip install git+https://github.com/hydrosolutions/ieasyreports.git@main
          python -m pip install -e ./apps/iEasyHydroForecast
          pip install playwright && playwright install
      - name: Test with pytest
        working-directory: ./apps
        run: |
          # Currently no tests implemented. No tests to run for the moment
          #SAPPHIRE_TEST_ENV=True python -m pytest -s forecast_dashboard/tests/
          pytest -s --slowmo 300 

  # Build the forecast dashboard image
  build_dashboard:
    needs: [test_dashboard, test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Dockerize and push forecast dashboard to Dockerhub

    steps:
      # To use this repository's private action, you must check out the
      # repository.
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.DASHBOARD_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/forecast_dashboard/Dockerfile .


  # Final job that summarizes all built images
  summarize_builds:
    needs: [
      build_python_311_base_image,
#      build_pipeline_image,
      build_dashboard,
    ]
    runs-on: ubuntu-latest
    name: Summarize Docker image builds
    steps:
      - name: Generate summary
        run: |
          echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully built the following Docker images:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.BASE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.PIPELINE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.CONCMOD_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ env.PREPQ_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          # Add all other images here
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** These images were built for testing only and not pushed to DockerHub." >> $GITHUB_STEP_SUMMARY