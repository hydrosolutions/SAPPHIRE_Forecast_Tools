name: Test & deploy main branch

env:
  IMAGE_TAG: latest

  BASE_IMAGE_NAME: mabesa/sapphire-pythonbaseimage
  PIPELINE_IMAGE_NAME: mabesa/sapphire-pipeline
  DASHBOARD_IMAGE_NAME: mabesa/sapphire-dashboard
  CONFIG_IMAGE_NAME: mabesa/sapphire-configuration
  PREPQ_IMAGE_NAME: mabesa/sapphire-preprunoff
  PREPG_IMAGE_NAME: mabesa/sapphire-prepgateway
  LINREG_IMAGE_NAME: mabesa/sapphire-linreg
  ML_IMAGE_NAME: mabesa/sapphire-ml
  POSTPQ_IMAGE_NAME: mabesa/sapphire-postprocessing
  RERUN_IMAGE_NAME: mabesa/sapphire-rerun
  CONCMOD_IMAGE_NAME: mabesa/sapphire-conceptmod

on:
  push:
    branches: [ "clean_up_old_maintenance_logs" ]
  pull_request:
    branches: [ "main" ]

jobs:

  test_ieasyhydroforecast:
    runs-on: ubuntu-latest
    name: Test iEasyHydroForecast
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout the commit that triggered the workflow
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set PYTHONPATH
      run: |
        # Adding the iEasyHydroForecast folder to the PYTHONPATH
        echo "PYTHONPATH=${GITHUB_WORKSPACE}/apps/iEasyHydroForecast" >> $GITHUB_ENV
    - name: Install dependencies
      working-directory: .
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        python -m pip install -r ./apps/iEasyHydroForecast/requirements.txt
        python -m pip install git+https://github.com/hydrosolutions/ieasyhydro-python-sdk
        python -m pip install -e ./apps/iEasyHydroForecast
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      working-directory: ./apps
      run: |
        SAPPHIRE_TEST_ENV=True python -m unittest discover -s iEasyHydroForecast/tests -p 'test_*.py'

  build_and_push_python_311_base_image:
    needs: [test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Build and push Python 3.11 base image

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.BASE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/docker_base_image/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.BASE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"



  build_and_push_pipeline_image:
    needs: [build_and_push_python_311_base_image]
    runs-on: ubuntu-latest
    name: Build and push pipeline/orchestrator image

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.PIPELINE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/pipeline/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.PIPELINE_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"



  #push_config_to_Dckerhub:
  #  runs-on: ubuntu-latest
  #  name: Dockerize and push configuration dashboard
  #
  #  steps:
  #  # To use this repository's private action, you must check out the
  #  # repository.
  #  - name: Checkout
  #    uses: actions/checkout@v4
  #
  #  # Run the dockerization & deployment script
  #  - name: Build Docker image
  #    run: |
  #      docker build --no-cache \
  #      -t "${{ env.CONFIG_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
  #      -f ./apps/configuration_dashboard/dockerfile .
  #
  #  # Log in to the Docker registry
  #  - name: Log in to the Docker registry
  #    uses: docker/login-action@v3
  #    with:
  #      username: ${{ secrets.DOCKER_USERNAME }}
  #      password: ${{ secrets.DOCKER_PASSWORD }}
  #
  #  # Push the image to Dockerhub
  #  - name: Push the image to Dockerhub
  #    run: |
  #      docker push "${{ env.CONFIG_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"


  push_conceptual_model_to_Dckerhub:
    runs-on: ubuntu-latest
    name: Dockerize and push conceptual model module to Dockerhub

    steps:
    # To use this repository's private action, you must check out the
    # repository.
    - name: Checkout
      uses: actions/checkout@v4

    # Run the dockerization & deployment script
    - name: Build Docker image
      run: |
        docker build --no-cache \
        -t "${{ env.CONCMOD_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
        -f ./apps/conceptual_model/Dockerfile .

    # Log in to the Docker registry
    - name: Log in to the Docker registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Push the image to Dockerhub
    - name: Push the image to Dockerhub
      run: |
        docker push "${{ env.CONCMOD_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"


  test_preprocessing_runoff:
    needs: [build_and_push_python_311_base_image]
    runs-on: ubuntu-latest
    name: Test pre-processing of runoff
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Check out the current branch
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set PYTHONPATH
      run: |
        # Adding the iEasyHydroForecast folder to the PYTHONPATH
        echo "PYTHONPATH=${GITHUB_WORKSPACE}/apps/iEasyHydroForecast" >> $GITHUB_ENV
    - name: Install dependencies for pre-processing of runoff
      working-directory: ./apps
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r preprocessing_runoff/requirements.txt
        python -m pip install git+https://github.com/hydrosolutions/ieasyhydro-python-sdk
        python -m pip install -e iEasyHydroForecast
    - name: Test
      working-directory: ./apps
      run: |
        SAPPHIRE_TEST_ENV=True pytest preprocessing_runoff/test

  push_preprocessing_runoff_to_Dckerhub:
    needs: [test_preprocessing_runoff, test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Dockerize and push preprocessing runoff module to Dockerhub

    steps:
      # To use this repository's private action, you must check out the
      # repository.
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.PREPQ_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/preprocessing_runoff/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.PREPQ_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"


  set_up_preprocessing_gateway:
    needs: [build_and_push_python_311_base_image]
    runs-on: ubuntu-latest
    name: Setting up of preprocessing gateway
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Check out the current branch
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies for pre-processing of gateway data
      working-directory: ./apps
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r preprocessing_gateway/requirements.txt
        python -m pip install git+https://github.com/hydrosolutions/sapphire-dg-client.git


  push_preprocessing_gateway_to_Dckerhub:
    needs: [set_up_preprocessing_gateway]
    runs-on: ubuntu-latest
    name: Dockerize and push preprocessing gateway module to Dockerhub

    steps:
      # To use this repository's private action, you must check out the
      # repository.
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          --build-arg SAPPHIRE_DG_HOST=${{ secrets.SAPPHIRE_DG_HOST }} \
          -t "${{ env.PREPG_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/preprocessing_gateway/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.PREPG_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

  set_up_machine_learning:
    needs: [build_and_push_python_311_base_image, test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Setting up of machine learning environment
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Check out the current branch
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies for the machine learning module
      working-directory: ./apps
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r machine_learning/requirements.txt


  push_machine_learning_to_Dckerhub:
    needs: [set_up_machine_learning]
    runs-on: ubuntu-latest
    name: Dockerize and push machine learning module to Dockerhub

    steps:
      # To use this repository's private action, you must check out the
      # repository.
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.ML_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/machine_learning/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.ML_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"


  test_reset_forecast_run_date:
    needs: [test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Test reset forecast run date
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Check out the current branch
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set PYTHONPATH
        run: |
          # Adding the iEasyHydroForecast folder to the PYTHONPATH
          echo "PYTHONPATH=${GITHUB_WORKSPACE}/apps/iEasyHydroForecast" >> $GITHUB_ENV
      - name: Install dependencies for reset of run date
        working-directory: ./apps
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
          pip install -r reset_forecast_run_date/requirements.txt
          pip install git+https://github.com/hydrosolutions/ieasyhydro-python-sdk
          pip install -e iEasyHydroForecast
      - name: Test
        working-directory: ./apps
        run: |
          SAPPHIRE_TEST_ENV=True pytest reset_forecast_run_date/tests

  push_reset_forecast_to_Dckerhub:
    needs: [test_reset_forecast_run_date, test_ieasyhydroforecast, build_and_push_python_311_base_image]
    runs-on: ubuntu-latest
    name: Dockerize resetting of forecast run date and push to Dockerhub

    steps:
      # To use this repository's private action, you must check out the
      # repository.
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.RERUN_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/reset_forecast_run_date/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.RERUN_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"


  test_dashboard:
    needs: [build_and_push_python_311_base_image]
    runs-on: ubuntu-latest
    name: Test forecast dashboard
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checks out current branch
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set PYTHONPATH
        run: |
          # Adding the iEasyHydroForecast folder to the PYTHONPATH
          echo "PYTHONPATH=${GITHUB_WORKSPACE}/apps/iEasyHydroForecast" >> $GITHUB_ENV
      - name: Get env var from GitHub secrets
        run: |
          echo "ieasyhydroforecast_url=${{ secrets.ieasyhydroforecast_url }}" >> $GITHUB_ENV
      - name: Install dependencies
        # Default working directory is the repository root folder
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r ./apps/forecast_dashboard/requirements.txt
          python -m pip install git+https://github.com/hydrosolutions/ieasyhydro-python-sdk
          python -m pip install git+https://github.com/hydrosolutions/ieasyreports.git@main
          python -m pip install -e ./apps/iEasyHydroForecast
      - name: Test with pytest
        working-directory: ./apps
        run: |
          # Currently no tests implemented. No tests to run for the moment
          #SAPPHIRE_TEST_ENV=True python -m pytest -s forecast_dashboard/tests/

  push_dashboard_to_Dckerhub:
    needs: [test_dashboard, test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Dockerize and push forecast dashboard to Dockerhub

    steps:
      # To use this repository's private action, you must check out the
      # repository.
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.DASHBOARD_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/forecast_dashboard/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.DASHBOARD_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"


  push_postprocessing_runoff_to_Dckerhub:
    # Same requirements as preprocessing_runoff module
    needs: [test_preprocessing_runoff, test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Dockerize and push postprocessing module to Dockerhub

    steps:
      # To use this repository's private action, you must check out the
      # repository.
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.POSTPQ_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/postprocessing_forecasts/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.POSTPQ_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"


  test_linear_regression:
    needs: [build_and_push_python_311_base_image]
    runs-on: ubuntu-latest
    name: Test linear regression module
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Check out the current branch
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set PYTHONPATH
        run: |
          # Adding the iEasyHydroForecast folder to the PYTHONPATH
          echo "PYTHONPATH=${GITHUB_WORKSPACE}/apps/iEasyHydroForecast" >> $GITHUB_ENV
      - name: Install dependencies for reset of run date
        working-directory: ./apps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r linear_regression/requirements.txt
          python -m pip install git+https://github.com/hydrosolutions/ieasyhydro-python-sdk
          python -m pip install -e iEasyHydroForecast
      - name: Test
        working-directory: ./apps
        run: |
          #SAPPHIRE_TEST_ENV=True pytest linear_regression/test

  push_linreg_to_Dckerhub:
    # Same requirements as preprocessing_runoff module
    needs: [test_linear_regression, test_ieasyhydroforecast]
    runs-on: ubuntu-latest
    name: Dockerize and push linear regression module to Dockerhub

    steps:
      # To use this repository's private action, you must check out the
      # repository.
      - name: Checkout
        uses: actions/checkout@v4

      # Run the dockerization & deployment script
      - name: Build Docker image
        run: |
          docker build --no-cache \
          -t "${{ env.LINREG_IMAGE_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./apps/linear_regression/Dockerfile .

      # Log in to the Docker registry
      - name: Log in to the Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the image to Dockerhub
      - name: Push the image to Dockerhub
        run: |
          docker push "${{ env.LINREG_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"


