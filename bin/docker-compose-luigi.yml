# docker compose file for running the sapphire forecast tools
# build: ieasyhydroforecast_data_root_dir=<path> docker-compose -f /path/to/docker-compose.yml build --no-cache
# run: ieasyhydroforecast_data_root_dir=<path> docker-compose -f /path/to/docker-compose.yml up -d
# stop: docker-compose -f /path/to/docker-compose.yml down

services:

  luigid:
    build:
      context: ../
      dockerfile: ./apps/pipeline/Dockerfile
    ports:
      - "8082:8082"
    command: luigid
    container_name: sapphire-backend-luigid

  pipeline:
    depends_on:
      - luigid
    cpus: 4
    build:
      context: ../
      dockerfile: ./apps/pipeline/Dockerfile
      args:
        TAG: ${ieasyhydroforecast_backend_docker_image_tag:-latest}
    image: sapphire-backend:${ieasyhydroforecast_backend_docker_image_tag:-latest}  # Specify the image name and tag
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - ieasyhydroforecast_data_root_dir=${ieasyhydroforecast_data_root_dir}
      - ieasyhydroforecast_env_file_path=${ieasyhydroforecast_env_file_path}
      - SAPPHIRE_PREDICTION_MODE=${SAPPHIRE_PREDICTION_MODE}
    command: ['luigi', '--module', 'apps.pipeline.pipeline_docker', 'RunWorkflow']  # If run without luigid, '--local-scheduler']
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Mount docker socket
      - ${ieasyhydroforecast_data_ref_dir}/config:${ieasyhydroforecast_container_data_ref_dir}/config
      - ${ieasyhydroforecast_data_ref_dir}/daily_runoff:${ieasyhydroforecast_container_data_ref_dir}/daily_runoff
      - ${ieasyhydroforecast_data_ref_dir}/intermediate_data:${ieasyhydroforecast_container_data_ref_dir}/intermediate_data
      - ${ieasyhydroforecast_data_ref_dir}/bin:${ieasyhydroforecast_container_data_ref_dir}/bin
    container_name: sapphire-backend-pipeline-${SAPPHIRE_PREDICTION_MODE}
    group_add:
      - ${DOCKER_GID:-988}  # Add host's Docker GID dynamically




